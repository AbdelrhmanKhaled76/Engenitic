@startuml
interface ICourseRepository {
    GetDetailsById(id:int) : Task<CourseDetailsResponse?>
    GetById(id:int) : Task<Course?>
    GetPageOfCourses(index:int) : Task<PaginatedList<CourseDTO>>
    GetPageOfHiddenCourses(index:int) : Task<PaginatedList<CourseDTO>>
    GetPageOfCoursesBySearching(searchTerm:string, index:int) : Task<PaginatedList<CourseDTO>>
    GetCourseStatistics(courseId:int) : Task<CourseStatistics?>
    GetInstructorCourses(instructorId:int, index:int) : Task<PaginatedList<CourseDTO>>
    MakeCourse(course:RegisterCourseRequest, hash:FileHash) : Task<Course>
    EditCourse(course:EditCourseRequest) : Task<Course>
    GetPageOfCoursesByTag(tag:string, index:int) : Task<PaginatedList<CourseDTO>>
    AddCourseToTag(courseId:int, tag:List<TagDTO>) : Task
}
class CoursesRepository {
    + CoursesRepository(context:AppDbContext)
    + <<async>> GetDetailsById(id:int) : Task<CourseDetailsResponse?>
    - GetCoursesQuery() : IQueryable<Course>
    + <<async>> GetById(id:int) : Task<Course?>
    + <<async>> GetPageOfCourses(index:int) : Task<PaginatedList<CourseDTO>>
    + <<async>> GetPageOfHiddenCourses(index:int) : Task<PaginatedList<CourseDTO>>
    + <<async>> GetPageOfCoursesBySearching(searchTerm:string, index:int) : Task<PaginatedList<CourseDTO>>
    + <<async>> GetCourseStatistics(courseId:int) : Task<CourseStatistics?>
    + <<async>> GetInstructorCourses(instructorId:int, index:int) : Task<PaginatedList<CourseDTO>>
    + <<async>> MakeCourse(courseReq:RegisterCourseRequest, hash:FileHash) : Task<Course>
    + <<async>> EditCourse(courseReq:EditCourseRequest) : Task<Course>
    + GetPageOfCoursesByTag(tag:string, index:int) : Task<PaginatedList<CourseDTO>>
    + <<async>> AddCourseToTag(courseId:int, tags:List<TagDTO>) : Task
}
class "IRepository`1"<T> {
}
class "Repository`1"<T> {
}
class "DbSet`1"<T> {
}
"IRepository`1" "<Course>" <|-- ICourseRepository
"Repository`1" "<Course>" <|-- CoursesRepository
ICourseRepository <|-- CoursesRepository
CoursesRepository --> "_tags<Tag>" "DbSet`1"
@enduml
