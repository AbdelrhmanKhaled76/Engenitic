@startuml
interface IJwtTokenService {
    GenerateRefreshToken(appUser:AppUser) : (RefreshToken, string)
    GenerateJwtToken(userWithTokenAndRoles:AppUser) : (string, string)
    ExtractIdAndJtiFromExpiredToken(token:string) : (int, string)
    IsAccessTokenValid(token:string) : bool
    ExtractJwtTokenFromContext(context:HttpContext) : string?
    GetAccessTokenExpiration(accessToken:string) : DateTimeOffset
    IsRefreshTokenExpired(refreshToken:RefreshToken) : bool
    VerifyRefreshHmac(raw:string, hashed:string) : bool
}
class JwtTokenService {
    + JwtTokenService(options:IOptions<JwtOptions>, encryptionService:IEncryptionService, tokenValidationParameters:IOptions<TokenValidationParameters>)
    + GenerateJwtToken(user:AppUser) : (string, string)
    - GenerateSecureToken() : string
    + GenerateRefreshToken(appUser:AppUser) : (RefreshToken, string)
    - GetPrincipalFromExpiredToken(token:string) : ClaimsPrincipal
    + IsAccessTokenValid(token:string) : bool
    + GetAccessTokenExpiration(accessToken:string) : DateTimeOffset
    + ExtractIdAndJtiFromExpiredToken(token:string) : (int, string)
    + ExtractJwtTokenFromContext(context:HttpContext) : string?
    + VerifyRefreshHmac(raw:string, hashed:string) : bool
    + IsRefreshTokenExpired(refreshToken:RefreshToken) : bool
}
IJwtTokenService <|-- JwtTokenService
JwtTokenService --> "_encryptionService" IEncryptionService
JwtTokenService --> "_tokenValidationParameters" TokenValidationParameters
JwtTokenService --> "_jwtOptions" JwtOptions
@enduml
