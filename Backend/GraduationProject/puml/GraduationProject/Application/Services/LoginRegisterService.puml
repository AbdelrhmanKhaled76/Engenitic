@startuml
interface ILoginRegisterService {
    Login(model:LoginCustomRequest) : Task<(ServiceResult<LoginResponse>, string?)>
    Logout(accessToken:string, refreshToken:string) : Task<ServiceResult<string>>
    ExternalLogin(provider:string, payload:AuthenticatedPayload) : Task<(ServiceResult<LoginResponse>, string?)>
    Register(model:RegisterCustomRequest, isExternal:bool) : Task<ServiceResult<AppUserDTO>>
}
class LoginRegisterService {
    + LoginRegisterService(userManager:UserManager<AppUser>, tokenService:IJwtTokenService, options:IOptions<JwtOptions>, roleManager:RoleManager<Role>, unitOfWork:IUnitOfWork, tokenBlacklistService:ITokenBlacklistService, signInManager:SignInManager<AppUser>, uploadingService:IUploadingService, cloudinaryService:ICloudinaryService, userService:IUserService)
    + <<async>> Register(model:RegisterCustomRequest, isExternal:bool) : Task<ServiceResult<AppUserDTO>>
    + <<async>> Login(model:LoginCustomRequest) : Task<(ServiceResult<LoginResponse>, string?)>
    + <<async>> Logout(accessToken:string, refreshToken:string) : Task<ServiceResult<string>>
    + <<async>> ExternalLogin(provider:string, payload:AuthenticatedPayload) : Task<(ServiceResult<LoginResponse>, string?)>
}
class "UserManager`1"<T> {
}
class "RoleManager`1"<T> {
}
class "SignInManager`1"<T> {
}
ILoginRegisterService <|-- LoginRegisterService
LoginRegisterService --> "_userManager<AppUser>" "UserManager`1"
LoginRegisterService --> "_tokenService" IJwtTokenService
LoginRegisterService --> "_jwtOptions" JwtOptions
LoginRegisterService --> "_roleManager<Role>" "RoleManager`1"
LoginRegisterService --> "_unitOfWork" IUnitOfWork
LoginRegisterService --> "_tokenBlacklistService" ITokenBlacklistService
LoginRegisterService --> "_signInManager<AppUser>" "SignInManager`1"
LoginRegisterService --> "_uploadingService" IUploadingService
LoginRegisterService --> "_cloudinaryService" ICloudinaryService
LoginRegisterService --> "_userService" IUserService
@enduml
